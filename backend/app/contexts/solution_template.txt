# Solution Template for Python Learning Projects

## Overview

This file provides the correct solution for the lesson's exercises. The solution should be well-structured, commented, and clear, guiding both educators and students through the logic behind the code. Make sure to include practical, real-world examples that engage students aged 11-18.

## Structure of the Solution

1. **Function Definitions:**
   - Ensure functions are well-named and accompanied by clear, concise docstrings. The docstrings should explain the function's purpose and how it connects to the lesson objective.

Example:
```python
def calculate_area_of_circle(radius):
    """
    Calculate the area of a circle given the radius.
    Formula: Area = π * r^2
    Ensures the radius is positive.
    """
    if radius <= 0:
        return "Invalid radius. Must be positive."
    return 3.14159 * (radius ** 2)
```

2. **Main Program Logic:**
   - Demonstrate how to use the functions within the overall program. Ensure that the code is executable and provides the correct output for the lesson's problem.

Example:
```python
def main():
    # Example of using the function to calculate area
    radius = 5
    area = calculate_area_of_circle(radius)
    print(f"The area of a circle with radius {radius} is {area}")

if __name__ == "__main__":
    main()
```

3. **Edge Case Handling:**
   - The solution should account for common edge cases and include explanations of how they are handled. Encourage students to think about other edge cases they could test.

Example:
```python
def calculate_area_of_circle(radius):
    """
    Calculate the area of a circle given the radius.
    Handles cases where the radius is zero or negative.
    """
    if radius <= 0:
        return "Invalid radius. Please provide a positive value."
    return 3.14159 * (radius ** 2)
```

4. **Comments and Explanations:**
   - Fully comment on the solution to explain each step. For complex logic, provide additional explanations so students understand why the code is structured in a certain way. Relate the code back to the lesson's learning objectives.

Example:
```python
def main():
    try:
        # Get user input for the radius
        radius = float(input("Enter the radius of the circle: "))
        # Validate that the input is positive
        if radius <= 0:
            raise ValueError("Radius must be positive.")
        # Calculate the area
        area = calculate_area_of_circle(radius)
        # Display the result
        print(f"The area of a circle with radius {radius} is {area}")
    except ValueError as e:
        # Handle invalid input
        print(f"Error: {e}")
```

5. **Test Cases:**
   - Include test cases that validate the solution. Encourage students to modify these tests to explore other scenarios.

Example:
```python
def test_calculate_area_of_circle():
    assert calculate_area_of_circle(1) == 3.14159
    assert calculate_area_of_circle(2) == 12.56636
    assert calculate_area_of_circle(-1) == "Invalid radius. Please provide a positive value."
    assert calculate_area_of_circle(0) == "Invalid radius. Please provide a positive value."

if __name__ == "__main__":
    test_calculate_area_of_circle()
    print("All tests passed!")
```

## Best Practices

1. **Modularity:** The solution should follow good coding practices. Functions should be small, focused on a single task, and reusable across different parts of the project.
2. **Readability:** Ensure that variable names are descriptive and that logic is broken into smaller, clear steps.
3. **Efficiency:** Write efficient code that avoids redundant steps or unnecessary calculations. Test for performance, especially given the constraints of the browser-based environment.
4. **Error Handling:** Include robust error handling with clear messages to help students identify and resolve issues.

## PRIMM Framework Integration

1. **Predict:** Ask students to predict the outcome before running the solution. Encourage them to think critically about what they expect the program to do.
2. **Run:** Allow students to run the program and observe the output. Ensure the solution provides the correct result for the given input.
3. **Investigate:** Provide comments and explanations to help students understand the logic of the solution.
4. **Modify:** Encourage students to modify the code, such as by adding new edge cases or enhancing the functionality.
5. **Make:** Guide students in extending the solution by building something new based on what they have learned in this lesson.

# Summary

This solution template provides a structured framework for creating a complete, well-explained solution to a lesson’s exercise. It reinforces the lesson’s objectives and best practices in coding, while also encouraging students to modify and expand upon the solution.
