# Session Initialization Prompt for Python Learning Projects

## 1. User Input for Project Generation
If the user has proposed a project title and general theme, ensure that the project’s structure and content generation are built around these inputs.

- **User-Proposed Project Title**: {user_proposed_title}
- **User-Proposed General Theme**: {user_proposed_theme}

OpenAI should use this title and theme as the foundation for generating the project’s detailed structure, lessons, steps, and associated files. The project must align with the PRIMM (Predict, Run, Investigate, Modify, Make) and EBL (Explore, Build, Launch) frameworks, focusing on progressive, hands-on learning.

## 2. One File at a Time
Each file will be generated sequentially. OpenAI should generate one file at a time, allowing the user to review each file before proceeding to the next.

- **Lesson Content First**: Generate the main lesson content (e.g., `lesson_intro.md`).
- **Steps Next**: Once the lesson content is approved, generate individual steps (e.g., `step{step_number}.md`) one at a time.
- **Quizzes Last**: Finally, generate quizzes (e.g., `lesson_quiz.xml`) that test the key concepts introduced in the lesson.

## 3. Technical Constraints
The Python code generated must adhere to the following constraints due to the browser-based execution environment in the Coder Sports IDE:
- **No File I/O**: Avoid any code that requires reading from or writing to files.
- **No Multithreading**: The environment is synchronous and single-threaded.
- **Pyodide-Compatible Libraries**: Only use Python libraries supported by Pyodide. Avoid libraries that require external installation via pip.
- **Efficient Performance**: Ensure that the code is optimized for a browser environment with limited memory and CPU.

## 4. Educational Framework: PRIMM and EBL Models
The content generated must follow the PRIMM framework, which emphasizes progressive learning through prediction, investigation, and hands-on application:
- **Predict**: Encourage students to predict what will happen in the code before they execute it.
- **Run**: Allow students to run the code and compare the results to their predictions.
- **Investigate**: Provide explanations and prompts that guide students through understanding why the code behaves in certain ways.
- **Modify**: Create opportunities for students to modify the code and observe how their changes affect the outcome.
- **Make**: Encourage students to apply what they’ve learned by creating new projects or extending the lesson with creative enhancements.
